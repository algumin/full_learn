'use strict'				цю стрічку (ДИРЕКТИВУ) ми пишемо в самому початку файла js. вона означає, шо ми пишемо на стандарті ES6.
<script> alert(1) </script>		можна підключити прямо в html 
<script src="script.js"></script>	або його можна підключити до окремого файла. Є файли локальні і віддалені
// "Hello world!" 			односторокоий коментарій. швидкі клавіші: "CTRL + /"
/* "Hello world! */			багатостроковий коментарій
var leftBorderWidth = 1;		позначання змінної. Змінна мусить починатися з букви і містити букви, цифри, знак долара і нижнього підкреслення.
					назви змінних не можуть бути такі, які вже являються командами в мові програмування (alert, error, promt....)
					!!! ЯКЩО VAR ОГОЛОШЕНО В КОДІ, ТО ВОНА ВЖЕ ІСНУЄ ДО ВИПОВНЕННЯ СКРІПТА І ЇЇ ВИДНО ВСЮДИ. АЛЕ ЇЇ ЗНАЧЕНННЯ БУДЕ ВИДНО
					ЛИШЕ ТОДІ, ЯКШО ПРИСВОЄННЯ ЗНАЧЕННЯ БУДЕ РАНІШЕ ЗА ДІЮ, КОМАНДУ СКРИПТА !!!
let second = 2;				таким чином задана змінна почне існувати тільки після даної команди. тип Let застосовують тільки тоді, коли код до 
					нього доходить. такий тип оголошення називають "Всплитія пєрємєнних" або "хостинг". таким методом оптимізується пришвидшується код
					і економить нашу память браузера. Крім того LET буде видимий лише в зоні, обумовленій фігурними дужками {}
 
const pi = 3.14;			створює константу, яку неможливо поміняти. А з усім іншим - аналогічно LET.
consol.log(leftBorderWidth);		команда, яка буде виводити значення змінної в консоль браузера
	
						^^^^ТИПИ ЗМІННИХ:^^^^^^^
1. число number  var number = 5;
	цілі, дробові, Infinity (отримуємо при діленні на 0), NoN (not a number) (при операції без мамематичної логіки - напр. помножити або розділити число на строку)
2. строка string   var string = "Hello!";
	записується на кавичках ""   ''    ``
3. символ sym   var sum = Symbol();
	поки не дали інфи. просто треба знати, що він існує
4. логічний boolean   var boolen = true;
	 або так True, або ні False
5. nuul  null;
	коли чогось в коді просто не існує. По суті - це ссилка на неіснуючу річ
6. undefined   undefined;
	коли змінна існує в коді, але нічого їй не присвоєно ще.
7. обєкт Object   var obj = {};
	комплексний тип даних, колекція даних, структура, яка використовується для зберігання будь яких даних. Наприклад:
				let persone = {
   				name: "John",
   				age: "25",
 				isMarried: false
				};
	якшо ми хочемо звернутися до однієї зі мнінних цього обєкта, то на нам слід це робити таким способом:
				console.log(persone.name);
	є ще й інший варіант запису. він використовується рідше і призначенний для випадків, якщо змінній присвоєно довге строкове значення
				console.log(persone["name"]);
7.1. масив arrey  let arr = ['plum.png','jrange.jpg', 'apple.bmp'];
	масив є різновидністю обєкта. масив використовується для зберігання будь яких типів данних, які йдуть попордядку. Масив обзмежується квадратними дужками і 
	построєний так,	що для кожного значення в ньогу автоматично присвоюється порядковий номер. Масив може зберігати в собі на стільки строки, але і числа, 
	функції, обєкти і т.д. Щоби вивести в консоль (звернутися до) apple.bmp, нам треба запрости 3 елемент масиву. Оскільки нумерація починється з нуля 0, то 
	третім тут буде №2 :
				console.log(arr[2]);
{прості типи даних - 1; 2; 3; 4; 5; 6; складні типи даних - спеціальні[7,1; function; обєкти дати; регулярні вираження; помилки] і звичайні [7] }    ^^^^^^^^^

alert("Hello World!");				виводить повідомлення в браузері. при цьому зупиняється весь скріпт, доки користувач не виконає дію.	

confirm("Are you here?");			виводить на екаран питання "ар ю гір?" з кнопками "ок" і "кансел". 

let answer = confirm("Are you here?");		якшо натиснемо "ок" - в консоль приїду булінгове занчення True
console.log(answer);				якшо "кансел"  - булінгове значення False

let answer = prompt("Есть ли вас 18?","DA");	з таким записом браузер буде видавати вікно з питанням, але користувач зможе написати довільну відповідь 
console.log(answer);				замість слова "ДА" (якшо залишити тільки кавички, до заготовленого слова не появиться). При цьому будь-яка
						відповідь від користувача буде в консолі показуватися типом даних "строка" стрінг, навіть, якшо ми вписуєм цифри. 
						Для того, щоби перевірити це, можна записати в коді так:
								let answer = prompt("Есть ли вас 18?","DA");
								console.log(typeof(answer));

typeof(answer);					команда дозволяє перевірити змінну на тип даних і викинадє інфу в консоль
					*******Оператори*******
+	оператор додавання. Якшо число + число = число. строка + строка = строка. [число + строка = строка. (КОНКОТИНАЦІЯ)]. а ше + можна ставити перед командами і 
	він примусово поміняє тип даних з строки в число (його в таких пипадках називають унарним). наприклад:
							let answer = +prompt("Есть ли вас 18?","DA");
							console.log(typeof(answer));
інкремент ++	let incr = 10,
декремент --	decr = 10;
		incr++;
		decr--;

		console.log(incr);	(тут змінна інкр набуде занчення 9)
		console.log(decr);	(а тут змінна декр буде 11)


чим відрізняється префіксна форма від постфіксної? - Прекіксна змінює вже змінене значення, а постфіксна - старе.
		let incr = 10,
		    decr = 10;
		[[[[[[[[console.log(++incr);		а от в такому записі міначення поміняються, як 
		        console.log(--decr);]]]]]]]	і в попередньому випадку.
		[[[[[[[[console.log(incr++);		а от в такому записі значання не поміняються, 
		        console.log(decr--);]]]]]]]	скільки їх це постфіксна форма.
%	оператор виводить остачу від ділення цілих чисел.
=	присвоєння (наприклад при змінних)
==	провірка на рівність. (строка "2" == число 2) - в консолі буде true, бо оператор == зрівнює значенння.
===	провірка по тимам даних. (строка "2" == число 2) - консолі буде False, бо оператор === зрівнює типи даних.
і &&	записується двома знаками імперсанта. 	true && true = true, true && false = false, false && false = false.
або ||	записується двома ||. 			true || true = true, true || false = true, false && false = false
!	оператор ! міняє правду в брехню і брехню в правду. його записують перед змінною


